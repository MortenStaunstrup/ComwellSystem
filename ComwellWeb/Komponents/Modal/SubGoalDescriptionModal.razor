@using ComwellWeb.Services.Interfaces
@using Core
@inject ICommentService CommentService
@inject INotificationService NotificationService
@inject IUserNotificationService UserNotificationService

@if (Visible && Goal != null)
{
    <div class="modal-backdrop" @onclick="Close">
        <div class="modal-content" @onclick:stopPropagation>
            <button class="close-button" @onclick="Close">X</button>

            <h3>@Goal.SubGoalName</h3>
            <p>@Goal.SubGoalDescription</p>
            <p><strong>Kategori:</strong> @Goal.SubGoalCategory</p>

            @if (_comments != null)
            {
                @foreach (var c in _comments)
                {
                    <p><strong>@c.commentSender:</strong> @c.Text</p>
                }
            }
            else
            {
                <p>Indlæser kommentarer...</p>
            }

            <input type="text" @bind="_newCommentText" placeholder="Skriv kommentar..." />
            <button @onclick="SendComment">Send kommentar</button>
            <button @onclick="SendDoneNotification">Jeg er færdig</button>
        </div>
    </div>
}

@code {
    [Parameter] public bool VejenDerTil { get; set; }
    [Parameter] public SubGoal? Goal { get; set; }
    [Parameter] public bool Visible { get; set; }
    [Parameter] public EventCallback OnCloseRequested { get; set; }

    [Parameter]
    public User CurrentUser { get; set; } = new User();

    private List<Comment>? _comments;
    private string _newCommentText = "";

    protected override async Task OnParametersSetAsync()
    {
        if (Goal != null)
        {
            _comments = new()
            {
                new Comment { commentSender = "Anna", Text = "Godt gået!" },
                new Comment { commentSender = "Jens", Text = "Mangler lidt info." }
            };
        }
    }

    private Task Close() => OnCloseRequested.InvokeAsync();

    private Task SendComment()
    {
        if (!string.IsNullOrWhiteSpace(_newCommentText))
        {
            _comments?.Add(new Comment
            {
                commentSender = CurrentUser?.UserEmail ?? "Ukendt",
                Text = _newCommentText
            });
            _newCommentText = "";
        }
        return Task.CompletedTask;
    }

    private async Task SendDoneNotification()
    {
        if (CurrentUser?.UserId == 0 || CurrentUser?.UserIdResponsible == null || Goal == null)
        {
            return;
        }

        int nextId = await NotificationService.GetMaxNotificationIdAsync();
        var note = new Notification
        {
            Id = nextId + 1,
            SubGoalId = Goal.SubGoalId,
            SenderUserId = CurrentUser.UserId,
            ReceiverUserId = CurrentUser.UserIdResponsible.Value,
            Message = $"{CurrentUser.UserEmail} har markeret et delmål som færdigt.",
            CreatedAt = DateTime.UtcNow,
            NotificationContent = "Delmål afsluttet. Du kan nu bekræfte." //gør det samme som message. Den var her bare før jeg begyndte, turde ikke slette den.
        };

        if (note.ReceiverUserId is not int receiverId)
            return;

        var success = await UserNotificationService.NotifyUserAsync(receiverId, note);
        ;

        if (success)
        {
            Console.WriteLine("Delmål markeret færdigt");
        }
        else
        {
            Console.WriteLine("Fejl");
        }
    }


    public class Comment
    {
        public string commentSender { get; set; } = "";
        public string Text { get; set; } = "";
    }
}
