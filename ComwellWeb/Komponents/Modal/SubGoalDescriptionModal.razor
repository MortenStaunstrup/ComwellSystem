@using ComwellWeb.Komponents.Modal
@using ComwellWeb.Pages
@using Core

@if (Visible && Goal != null)
{
    <div class="modal-backdrop" @onclick="CloseOnBackdropClick">
        <div class="modal-content" @onclick:stopPropagation>
            <button class="close-button" @onclick="Close">X</button>
            <h3>@Goal.SubGoalName</h3>
            <p>@Goal.SubGoalDescription</p>
            <p><strong>Kategori:</strong> @Goal.SubGoalCategory</p>

            @if (VejenDerTil)
            {
                <button class="btn btn-primary" @onclick="() => NotifyResponsibleCookApplication(Goal.SubGoalId)">Ansøg</button>
            }
            else
            {
                <div>
                    @if (_comments != null)
                    {
                        @foreach (var comment in _comments)
                        {
                            <p><strong>@comment.Author:</strong> @comment.Text</p>
                        }
                    }
                    else
                    {
                        <p>Indlæser kommentarer...</p>
                    }
                </div>

                <input class="input" type="text" placeholder="Skriv din kommentar her.." @bind="_newCommentText" />
                <button @onclick="SendComment">Send kommentar</button>
                <button @onclick="() => NotifyResponsibleCook(Goal.SubGoalId)">Jeg er færdig med delmål</button>
            }
        </div>
    </div>
}

@code {
    [Parameter] public bool VejenDerTil { get; set; }
    [Parameter] public SubGoal? Goal { get; set; }
    [Parameter] public bool Visible { get; set; }
    [Parameter] public EventCallback OnCloseRequested { get; set; }
    [Parameter] public User CurrentUser { get; set; }

    private List<Comment>? _comments = new();
    private string _newCommentText = string.Empty;

    private Task Close() => OnCloseRequested.InvokeAsync();
    private Task CloseOnBackdropClick() => OnCloseRequested.InvokeAsync();

    protected override async Task OnInitializedAsync()
    {
        if (Goal != null)
        {
          
            _comments = new List<Comment>
            {
                new Comment { Author = "Anna", Text = "Godt gået!" },
                new Comment { Author = "Jens", Text = "Mangler lidt info." }
            };
        }
    }

    private async Task SendComment()
    {
        if (!string.IsNullOrWhiteSpace(_newCommentText))
        {
            _comments?.Add(new Comment
            {
                Author = CurrentUser.UserEmail,
                Text = _newCommentText
            });

            _newCommentText = string.Empty;
        }
    }

    private async void NotifyResponsibleCook(int subGoalId)
    {
        // TODO: Notifikation til ansvarlig for færdiggørelse
    }

    private async void NotifyResponsibleCookApplication(int subGoalId)
    {
        // TODO: Notifikation om interesse
    }

    public class Comment
    {
        public string Author { get; set; } = "";
        public string Text { get; set; } = "";
    }
}
