@using Core
<div class="imagedropdown-container">
    
    <!-- ToggleDropdown bruges til at flippe _isOpen boolen -->
    <div class="imagedropdown-header" @onclick="ToggleDropdown">
        <span class="imagedropdown-arrow">▼ Tildel Køkkenansvarlige</span>
    </div>
    @if (_isOpen)
    {
        <div>
            <ul>
            @if (_kitchenManagers != null && _kitchenManager.UserId == 0) // Checker om værdien på den valgte KitchenManager er 0
            {                                                             // Hvis den er, så er der ikke valgt en KitchenManager endnu, og alle KitchenManagers skal vises
                foreach (var manager in _kitchenManagers)
                {
                    <li>
                        <!-- vælger defaultpicture eller profilbillede hvis eksisterer -->
                        <img alt="KitchenManager Profile Picture" src="@(string.IsNullOrWhiteSpace(manager.Picture) ? "sample-data/No_image_available.svg.png" : $"data:image/gif;base64,{manager.Picture}")"/>
                        <span>@manager.UserName</span>
                        <button type="button" @onclick="() => AssignKitchenManager(manager)">Assign</button>
                    </li>
                }
            }
            </ul>
        </div>
        <div>
            <ul>
                <!-- Der er ingen i system der kan have id 0, og int default værdi er 0. 
                     Derfor hvis UserId ikke er 0, så er der en kitchenmanager valgt og man skal kun vise valgte kitchenmanager --> 
                @if (_kitchenManager.UserId != 0)
                {

                    <li>
                        <img alt="Student Profile Picture" src="@(string.IsNullOrWhiteSpace(_kitchenManager.Picture) ? "sample-data/No_image_available.svg.png" : $"data:image/gif;base64,{_kitchenManager.Picture}")"/>
                        <span>@_kitchenManager.UserName</span>
                        <button type="button" @onclick="() => UnassignKitchenManager(_kitchenManager)">Unassign</button>
                    </li>

                }
            </ul>
        </div>
    }
</div>
@code {
    [Parameter]
    public List<User>? _kitchenManagers { get; set; } = new List<User>();
    [Parameter] 
    public User _kitchenManager { get; set; } = new User();
    private bool _isOpen = false;
    private void ToggleDropdown() => _isOpen = !_isOpen;
    // EventCallback fortæller 'parent' pagen (CreateNewUser page) at _kitchenManager er ændret.
    [Parameter]
    public EventCallback<User> KitchenManagerChanged { get; set; }

    public async Task AssignKitchenManager(User manager)
    {
        _kitchenManagers.Remove(manager);
        _kitchenManager = manager;
        // InvokeAsync sender nye manager som parameter til parent page, og fortæller at den skal opdatere '_kitchenManager'
        await KitchenManagerChanged.InvokeAsync(manager);
    }

    public async Task UnassignKitchenManager(User manager)
    {
        _kitchenManager = new User();
        _kitchenManagers.Add(manager);
        await KitchenManagerChanged.InvokeAsync(_kitchenManager);
    }
}