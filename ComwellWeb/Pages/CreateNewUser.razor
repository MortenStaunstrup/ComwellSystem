@page "/opret"
@using ComwellWeb.Komponents
@using ComwellWeb.Services
@using Core
@inject NavigationManager NavigationManager
@inject IUserService _userService

@if (_currentUser == null)
{
    <p>Authenticating...</p>
}
else
{
    <div class="container-fluid py-4">
        <div class="row justify-content-center">
            <div class="col-md-6 FormOverordnet">
                <div class="card shadow p-4 mb-4">
                    <h3 class="text-center mb-4">Opret Bruger</h3>
                    <EditForm EditContext="EditContext" OnSubmit="HandleSubmit">
                        <DataAnnotationsValidator/>
                        <ValidationSummary/>
                        @if (!string.IsNullOrEmpty(statusMessage))
                        {
                            <p class="mt-3 alert alert-info">@statusMessage</p>
                        }
                        
                        <img src="@profilePicture" class="profile-picture" alt="Profil billede"/>
                        
                        <div>
                            <label for="pic">Billede</label>
                            <InputFile id="pic" OnChange="HandleImageUpload" accept=".jpg,.jpeg,.png,.webp"></InputFile>
                            <button type="button" @onclick="RemoveProfilePicture">Fjern profilbillede</button>
                        </div>
                        
                        <div class="mb-3">
                            <label for="userName">Navn:</label>
                            <InputText id="userName" class="form-control" @bind-Value="_model.UserName"/>
                        </div>

                        <div class="mb-3">
                            <label for="email">Mail:</label>
                            <InputText id="email" class="form-control" @bind-Value="_model.UserEmail"/>
                        </div>

                        <div class="mb-3">
                            <label for="phone">Telefonnummer:</label>
                            <InputText id="phone" class="form-control" @bind-Value="_model.UserPhone"/>
                        </div>
                        
                        <div class="mb-3">
                            <label for="password">Adgangskode:</label>
                            <InputText id="password" type="password" class="form-control" @bind-Value="_model.UserPassword"/>
                        </div>

                        <div class="mb-3">
                            <label for="role">Rolle:</label>
                            <InputSelect id="role" class="form-control" @bind-Value="_model.Role" @onchange="OnRoleChange">
                                <option value="">-- Vælg rolle --</option>
                                <option value="Student">Elev</option>
                                <option value="KitchenManager">Køkkenleder</option>
                                <option value="HR">HR</option>
                     @if (_currentUser.Role == "Admin")
                                {
                                    <option value="Admin">Admin</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="mb-3">
                            @if (_kitchenManagers != null)
                            {
                                @if (_model.Role == "Student") // Hvis ny elev laves, indsæt 'KitchenManagerDropdown' så en 'responsible' kan assignes til eleven
                                {                              // '_kitchenManagers' er tilgængelige køkkenansvarlige, '_kitchenManager' er den køkkenansvarlig man forventer fra Dropdown
                                    <KitchenManagerDropdown @ref="dropdown" _kitchenManagers="_kitchenManagers" _kitchenManager="assignedKitchenManager" KitchenManagerChanged="@(user => assignedKitchenManager = user)"></KitchenManagerDropdown>
                                }
                            }
                        </div>

                        <div class="mb-3">
                            <label>Start Dato:</label>
                            <InputDate @bind-Value="@_model.StartDate"></InputDate>
                        </div>

                        <button class="btn btn-primary" type="submit">Opret</button>
                    </EditForm>
                    
                </div>
            </div>
        </div>
    </div>
}


@code {
    private User? _currentUser;
    private User _model;
    private EditContext EditContext;
    private string statusMessage = "";
    private List<User>? _kitchenManagers;
    private User? assignedKitchenManager = new User(); // Anvendes kun til at få valgt 'KitchenManager' fra Dropdown modal
    KitchenManagerDropdown? dropdown { get; set; }

    // Rå bytes af det uploadede billede (til konvertering til base64 og visning/gemning)
    byte[] pictureBytes;
    // Profilbilledets URL som vises i UI’et — viser standard hvis intet er valgt
    private string profilePicture = "/Pictures/NoProfilePicture.png";

    
    protected override async Task OnInitializedAsync()
    {
        //opretter en ny user
        _model = new User();
        // Initier EditContext med den nye bruger
        EditContext = new EditContext(_model);
        //Henter hvem der er logget ind igennem UserService,s GetUserLoggedInAsync funktionen
        _currentUser = await _userService.GetUserLoggedInAsync();
        if(_currentUser == null)
            NavigationManager.NavigateTo("/login");
        // Få det højeste bruger-ID fra databasen og sæt et nyt ID til den nye bruger
        int maxId = await _userService.GetMaxUserId();
        // plusser det id med én, så hvis maks er 30 bliver den nye 31
        _model.UserId = maxId + 1;
        //Henter alle køkkenmanagers ind igennem UserService,s GetAllKitchenManagersAsync() funktionen
        _kitchenManagers = await _userService.GetAllKitchenManagersAsync();
    }
    // Metode der kaldes, når formularen bliver indsendt
    private async Task HandleSubmit()
    {
        // Hvis der vælges "Elev", skal en køkkenchef være valgt. Hvis ikke, vis fejlbesked og stop.
        if (_model.Role == "Student" && assignedKitchenManager.UserId == 0)
        {
            statusMessage = "En elev skal have en køkken chef tildelt";
            return;
        }

        // Hvis rollen er elev, sæt ansvarlig ID
        if (_model.Role == "Student")
            _model.UserIdResponsible = assignedKitchenManager.UserId;

        // Tjek om alle felter i formularen er gyldige
        if (EditContext.Validate())
        {
            // Forsøg at tilføje brugeren til databasen via UserService
            var result = await _userService.AddUserAsync(_model);

            // Hvis resultatet er null, findes brugeren allerede (samme email og adgangskode)
            if (result == null)
            {
                statusMessage = "Brugeren findes allerede.";
            }
            else
            {
                // Vis succesbesked og nulstil formularfelter
                statusMessage = $"Bruger oprettet: {result.UserName} ({result.Role})";
                // Nulstil model
                _model = new();

                // Få næste tilgængelige ID og tildel
                int nextId = await _userService.GetMaxUserId();
                _model.UserId = nextId + 1;

                // Nulstil profilbillede
                profilePicture = "/Pictures/NoProfilePicture.png";
                pictureBytes = null;
            }
        }
    }
    
    // Håndtering af billed-upload fra InputFile
    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using var memoryStream = new MemoryStream();
            
            // Læs hele billedet ind i en byte-array
            await file.OpenReadStream().CopyToAsync(memoryStream);
            pictureBytes = memoryStream.ToArray();

            // Gem billede som base64-string i modellen
            _model.Picture = Convert.ToBase64String(pictureBytes);

            // Opdater UI med det valgte billede
            profilePicture = $"data:image/gif;base64,{_model.Picture}";

            // Tving UI til at re-render
            StateHasChanged();
        }
    }


    // Fjern det valgte profilbillede og sæt til standard
    private void RemoveProfilePicture()
    {
        _model.Picture = null;
        profilePicture = "/Pictures/NoProfilePicture.png";
        //for at opdatere front-end
        StateHasChanged();
    }

    // Kaldes når rollen ændres — f.eks. fra Admin til Student
    private void OnRoleChange(ChangeEventArgs e)
    {
        _model.Role = e.Value.ToString();
        // Bruger StateHasChanged() for at vise eller skjule kitchen-manager-dropdown dynamisk
        StateHasChanged();
    }
}
