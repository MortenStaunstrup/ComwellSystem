@page "/opret"
@using ComwellWeb.Services
@using Core
@inject NavigationManager NavigationManager
@inject IUserService _userService
<EditForm Model="@newUser" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="user-form-box">
        <div class="form-group">
            <label for="userName">Fornavn:</label>
            <InputText id="userName" class="form-control" @bind-Value="newUser.UserName" />
        </div>

        <div class="form-group">
            <label for="email">Mail:</label>
            <InputText id="email" class="form-control" @bind-Value="newUser.UserEmail" />
        </div>

        <div class="form-group">
            <label for="phone">Telefonnummer:</label>
            <InputText id="phone" class="form-control" @bind-Value="newUser.UserPhone" />
        </div>

        <div class="form-group">
            <label for="password">Adgangskode:</label>
            <InputText id="password" type="password" class="form-control" @bind-Value="newUser.UserPassword" />
        </div>

        <div class="form-group">
            <label for="role">Rolle:</label>
            <InputSelect id="role" class="form-control" @bind-Value="newUser.Role">
                <option value="">-- Vælg rolle --</option>
                <option value="Student">Elev</option>
                <option value="KitchenManager">Køkkenleder</option>
                <option value="HR">HR</option>
            </InputSelect>
        </div>
        
        <div class="form-group">
            <label>Start Dato:</label>
            <InputDate @bind-Value="@newUser.StartDate"></InputDate>
        </div>

        <button class="btn btn-primary" type="submit">Opret</button>
    </div>
</EditForm>

@if (!string.IsNullOrEmpty(statusMessage))
{
    <p class="mt-3 alert alert-info">@statusMessage</p>
}

@code {
    private User newUser = new();
    private DateTime? StartDate;
    private string statusMessage = "";

    protected override async Task OnInitializedAsync()
    {
        int maxId = await _userService.GetMaxUserId();
        newUser.UserId = maxId + 1;
    }

    private async Task HandleValidSubmit()
    {
        if (StartDate.HasValue)
        {
            newUser.StartDate = DateOnly.FromDateTime(StartDate.Value);
        }
        
        var result = await _userService.AddUserAsync(newUser);

        if (result == null)
        {
            statusMessage = "Brugeren findes allerede.";
        }
        else
        {
            statusMessage = $"Bruger oprettet: {result.UserName} ({result.Role})";
            newUser = new();
            StartDate = null;
            int nextId = await _userService.GetMaxUserId();
            newUser.UserId = nextId + 1;
        }
    }
}
