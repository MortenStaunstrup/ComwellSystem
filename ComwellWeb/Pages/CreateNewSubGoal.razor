@page "/createnewsubgoal"
@using ComwellWeb.Services.Interfaces
@using Core
@using ComwellWeb.Komponents
@inject NavigationManager NavMan
@inject ISubGoalService SubGoalService

@if (_currentUser == null)
{
    <p>Authenticating User....</p>
}
else
{
    <div class="container-fluid py-4">
        <div class="row justify-content-center">
            <div class="col-md-6 FormOverordnet">
                <div class="card shadow p-4 mb-4">
                    <h3 class="text-center mb-4">Opret Delmål</h3>
                    <EditForm EditContext="EditContext" OnSubmit="HandleSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <InputText @bind-Value="_model.SubGoalName" class="form-control form-control-lg" placeholder="Titel.." />
                        </div>
                        
                        <div class="mb-3">
                            <InputTextArea @bind-Value="_model.SubGoalDescription" class="form-control" placeholder="Beskrivelse.." />
                        </div>

                        <div class="mb-3">
                            <InputDate @bind-Value="_model.SubGoalDueDate" class="form-control" placeholder="dd-mm-åååå" />
                        </div>

                        <div class="mb-3">
                            <InputSelect @bind-Value="_model.SubGoalCategory" class="form-control">
                                <option value="">Vælg kategori</option>
                                @foreach (var category in _categories)
                                {
                                    <option value="@category">@category</option>
                                }
                            </InputSelect>
                        </div>
                        
                        <div class="mb-3">
                            <InputSelect @bind-Value="_model.SubGoalType" @onchange="OnSubGoalTypeChange" class="form-control">
                                <option value="">Vælg type</option>
                                @foreach (var type in _types)
                                {
                                    if (type == "Standard")
                                    {
                                        <option value="@type">@type opgave (BLIVER UDGIVET TIL ALLE ELEVER)</option>
                                    }
                                    else
                                    {
                                        <option value="@type">@type opgave</option>
                                    }
                                }
                            </InputSelect>
                        </div>

                        <div class="mb-3">
                            @if (_myStudents != null)
                            {
                                @if (_model.SubGoalType == "Extra")
                                {
                                    <StudentDropdown _students="_myStudents" _addedStudents="_addedStudents" @ref="dropdown"></StudentDropdown>
                                }
                            }
                        </div>

                        <div class="d-flex justify-content-between">
                            <button type="submit" class="btn btn-success">Tildel Delmål</button>
                        </div>
                    </EditForm>
                    <p style="color: red">@_errorMessage</p>
                </div>
            </div>
            
        </div>
    </div>
}

@code {
    User _currentUser;
    List<User>? _myStudents;
    List<User> _addedStudents = new List<User>();
    
    SubGoal _model;
    EditContext EditContext;
    
    StudentDropdown? dropdown { get; set; }
    string _errorMessage;
    int currentMaxId;

    string[] _categories = new[]
    {
        "Kursus", "Køkken kompetence", "Faglig mål"
    };
    
    string[] _types = new[]
    {
        "Standard", "Extra"
    };

    protected override async Task OnInitializedAsync()
    {
        _currentUser = new User()
        {
            UserId = 23,
            UserName = "Kenneth Hansen",
            UserEmail = "KH@Comwell.dk",
            UserPassword = "mitpass",
            UserPhone = "22177992",
            Role = "KitchenManager",
            Messages = null,
            Notifications = null,
            Picture = null,
            StudentPlan = null,
            UserIdResponsible = null,
            StartDate = null
        };

        if (_currentUser.Role != "KitchenManager")
        {
            NavMan.NavigateTo("/");
        }

        _model = new SubGoal();
        EditContext = new EditContext(_model);
        currentMaxId = await SubGoalService.MaxSubGoalId();
        _myStudents = new List<User>()
        {
            new User()
            {
                UserId = 1,
                UserName = "tis",
                UserEmail = "MF@Comwell.dk",
                UserPassword = "hejhej",
                UserPhone = "238240289",
                Role = "Student",
                Messages = null,
                Notifications = null,
                Picture = null,
                StudentPlan = null,
                UserIdResponsible = 23,
                StartDate = new DateOnly(2022, 6, 16)
            },
            new User()
            {
                UserId = 2,
                UserName = "lars",
                UserEmail = "Egg@Comwell.dk",
                UserPassword = "bilsd",
                UserPhone = "95283984",
                Role = "Student",
                Messages = null,
                Notifications = null,
                Picture = null,
                StudentPlan = null,
                UserIdResponsible = 23,
                StartDate = new DateOnly(2022, 6, 16)
            }
        };
    }

    private async void HandleSubmit()
    {
        _model.SubGoalId = currentMaxId + 1;
        if (EditContext.Validate())
        {
            if (_model.SubGoalType == "Standard")
            {
                SubGoalService.CreateSubGoal(_model);
                SubGoalService.InsertSubgoalAll(_model);
            }
            else
            {
                if (_addedStudents.Count == 0)
                {
                    _errorMessage = "Du skal angive mindst én elev til en ekstra opgave";
                    StateHasChanged();
                    return;
                }
                var studentIds = new List<int>();
                foreach (var student in _addedStudents)
                {
                    studentIds.Add(student.UserId);
                }
                SubGoalService.CreateSubGoal(_model);
                SubGoalService.InsertSubgoalSpecific(_model, studentIds);
            }
            ResetModels();
        }
    }
    
    private async void ResetModels()
    {
        _model = new SubGoal();
        EditContext = new EditContext(_model);
        _addedStudents = new List<User>();
        StateHasChanged();
        Thread.Sleep(2000);
        currentMaxId = await SubGoalService.MaxSubGoalId();
    }

    private void OnSubGoalTypeChange(ChangeEventArgs e)
    {
        _model.SubGoalType = e.Value.ToString();
        StateHasChanged();
    }

}
