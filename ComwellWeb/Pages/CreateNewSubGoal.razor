@page "/createnewsubgoal"
@using ComwellWeb.Services.Interfaces
@using Core
@using ComwellWeb.Komponents
@inject NavigationManager NavMan
@inject ISubGoalService SubGoalService

@if (_currentUser == null)
{
    <p>Authenticating User....</p>
}
else
{
    <div class="container-fluid py-4">
        <div class="row justify-content-center">
            <div class="col-md-6 FormOverordnet">
                <div class="card shadow p-4 mb-4">
                    <h3 class="text-center mb-4">Opret Delmål</h3>
                    <EditForm EditContext="EditContext" OnSubmit="HandleSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <InputText @bind-Value="_model.SubGoalName" class="form-control form-control-lg" placeholder="Titel.." />
                        </div>

                        <div class="mb-3">
                            <InputFile OnChange="HandleImageUpload" accept=".png,.jpeg,.jpg,.webp" class="form-control" />
                        </div>

                        <div class="mb-3">
                            <InputTextArea @bind-Value="_model.SubGoalDescription" class="form-control" placeholder="Beskrivelse.." />
                        </div>

                        <div class="mb-3">
                            <InputDate @bind-Value="_model.SubGoalDueDate" class="form-control" placeholder="dd-mm-åååå" />
                        </div>

                        <div class="mb-3">
                            <InputNumber TValue="double?" @bind-Value="_model.SubGoalTime" class="form-control" placeholder="--:--" />
                        </div>

                        <div class="mb-3">
                            <InputSelect @bind-Value="_model.SubGoalCategory" class="form-control">
                                <option value="">Vælg kategori</option>
                                @foreach (var category in _categories)
                                {
                                    <option value="@category">@category</option>
                                }
                            </InputSelect>
                        </div>

                        <div class="mb-3">
                            @if (_myStudents != null)
                            {
                                <StudentDropdown _students="_myStudents" _addedStudents="_addedStudents" @ref="dropdown"></StudentDropdown>
                            }
                        </div>

                        <div class="mb-3">
                            <InputText class="form-control" @bind-Value="_comment" placeholder="Evt. kommentar" />
                        </div>

                        <div class="d-flex justify-content-between">
                            <button type="submit" class="btn btn-success">Tildel Delmål</button>
                            <button @onclick="AddToTemplates" type="submit" class="btn btn-primary">Tildel og Tilføj Template</button>
                        </div>
                    </EditForm>
                </div>
            </div>

            <div class="col-md-5">
                <div class="card shadow p-3 listTemplates-box">
                    <h3 class="text-center">Templates</h3>

                    @if (_templates == null)
                    {
                        <p class="text-muted">Ingen templates tilgængelige</p>
                    }
                    else
                    {
                        <div class="template-scroll">
                            @foreach (var template in _templates)
                            {
                                <div class="card mb-3 templateCard">
                                    <img class="card-img-top" alt="Template billede" src="@(string.IsNullOrWhiteSpace(template.TemplateSubGoalPicture) ? "sample-data/No_image_available.svg.png" : $"data:image/gif;base64,{template.TemplateSubGoalPicture}")" />
                                    <div class="card-body">
                                        <h5 class="card-title">@template.TemplateSubGoalName</h5>
                                        <p class="card-text">@template.TemplateSubGoalDescription</p>
                                        <small class="text-muted">@template.TemplateSubGoalCategory</small>
                                        <button class="btn btn-sm btn-outline-primary mt-2" @onclick="() => UseTemplate(template.TemplateSubGoalId)">Brug Template</button>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    private string _comment; //Test af Umut da der ellers kom fejl med der hvor dens tilhørende bindvalue="_comment" er
    User _currentUser;
    List<User>? _myStudents = new List<User>()
    {
        new User()
        {
            UserId = 1,
            UserName = "Martin Felixen",
            UserEmail = "MF@Comwell.dk",
            UserPassword = "hejhej",
            UserPhone = "238240289",
            Role = "Student",
            Messages = null,
            Notifications = null,
            Picture = null,
            StudentPlan = null,
            UserIdResponsible = 23,
            UserSemester = new DateOnly(2022, 6, 16)
        },
        new User()
        {
            UserId = 2,
            UserName = "Morten Egg",
            UserEmail = "Egg@Comwell.dk",
            UserPassword = "bilsd",
            UserPhone = "95283984",
            Role = "Student",
            Messages = null,
            Notifications = null,
            Picture = null,
            StudentPlan = null,
            UserIdResponsible = 23,
            UserSemester = new DateOnly(2022, 6, 16)
        },
        new User()
        {
            UserId = 3,
            UserName = "Fleg Nielsen",
            UserEmail = "FlN@Comwell.dk",
            UserPassword = "sgesg",
            UserPhone = "84329425",
            Role = "Student",
            Messages = null,
            Notifications = null,
            Picture = null,
            StudentPlan = null,
            UserIdResponsible = 23,
            UserSemester = new DateOnly(2022, 6, 16)
        }
    };

    List<User> _addedStudents = new List<User>();
    List<TemplateSubGoal>? _templates;
    SubGoal _model;
    EditContext EditContext;
    bool _addToTemplate = false;
    byte[] pictureBytes;
    StudentDropdown? dropdown { get; set; }

    string[] _categories = new[]
    {
        "Kursus", "Køkken kompetence", "Faglig mål"
    };

    protected override async Task OnInitializedAsync()
    {
        _currentUser = new User()
        {
            UserId = 23,
            UserName = "Kenneth Hansen",
            UserEmail = "KH@Comwell.dk",
            UserPassword = "mitpass",
            UserPhone = "22177992",
            Role = "Cook",
            Messages = null,
            Notifications = null,
            Picture = null,
            StudentPlan = null,
            UserIdResponsible = null,
            UserSemester = null
        };

        if (_currentUser.Role != "Cook")
        {
            NavMan.NavigateTo("/");
        }

        _model = new SubGoal();
        EditContext = new EditContext(_model);
        _templates = await SubGoalService.GetAllTemplateSubGoalsAsync();
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using var memoryStream = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(memoryStream);
            pictureBytes = memoryStream.ToArray();
            _model.SubGoalPicture = Convert.ToBase64String(pictureBytes);
        }
    }

    private void HandleSubmit()
    {
        _model.SubGoalId = 0;
        _model.StudentId = 0;

        if (EditContext.Validate())
        {
            if (_addToTemplate)
            {
                // Omdanner subgoal til template
                TemplateSubGoal temp = new TemplateSubGoal()
                {
                    TemplateSubGoalCategory = _model.SubGoalCategory,
                    TemplateSubGoalDescription = string.IsNullOrWhiteSpace(_model.SubGoalDescription) ? "No desc..." : _model.SubGoalDescription,
                    TemplateSubGoalId = 0,
                    TemplateSubGoalName = _model.SubGoalName,
                    TemplateSubGoalPicture = _model.SubGoalPicture
                };
                SubGoalService.AddSubGoalToTemplates(temp);
                _addToTemplate = false;
            }

            foreach (var student in _addedStudents)
            {
                _model.StudentId = student.UserId;
                SubGoalService.CreateSubGoal(_model);
            }

            ResetModels();
        }
    }

    private void UseTemplate(int templateId)
    {
        var template = _templates.Find(x => x.TemplateSubGoalId == templateId);
        _model.SubGoalCategory = template.TemplateSubGoalCategory;
        _model.SubGoalDescription = template.TemplateSubGoalDescription;
        _model.SubGoalName = template.TemplateSubGoalName;
        if (!string.IsNullOrWhiteSpace(template.TemplateSubGoalPicture))
        {
            _model.SubGoalPicture = template.TemplateSubGoalPicture;
        }
        StateHasChanged();
    }

    private void AddToTemplates()
    {
        _addToTemplate = true;
    }

    private void ResetModels()
    {
        _model = new SubGoal();
        EditContext = new EditContext(_model);
        StateHasChanged();
    }
}
