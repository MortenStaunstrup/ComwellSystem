@using Core;
@page "/MyStudents"

<div class="page-wrapper">
    <div class="header">
        <div class="search-container">
            <input type="text" @bind="searchQuery" placeholder="Søg på studerende..." class="search-input" />
            <select @bind="sortOrder" class="sort-dropdown">
                <option value="asc">A-Z</option>
                <option value="desc">Z-A</option>
            </select>
        </div>
    </div>

    <div id="AltIndhold">
        <div class="student-scroll-container">
            @foreach (var Student in FilteredStudents)
            {
                <a href="@($"/StudentOverview/{Student.UserId}")" class="student-row-link">
                    <div class="student-row">
                        @if (Student.Picture == null)
                        {
                            <img class="profile-picture" alt="Intet Profil billede" src="Pictures/NoProfilePicture.png" />
                        }
                        else
                        {
                            <img class="profile-picture" alt="Profil billede" src="@Student.Picture" />
                        }

                        <div class="progress-and-name">
                            <h3>@Student.UserName</h3>
                            <div class="progress-container">
                                <div class="progress-bar"></div>
                            </div>
                        </div>

                        <div class="emoji-container">
                            <img class="EmojiPic" alt="Progress emoji" src="Pictures/NoProfilePicture.png" />
                        </div>
                    </div>
                </a>
            }
        </div>
    </div>
</div>

@code {
    public List<User> MyStudentsList = new()
    {
        new User { UserId = 1, UserName = "Karl Hansen", Role = "Student", UserEmail = "karl.hansen@email.com" },
        new User { UserId = 2, UserName = "Emma Sørensen", Role = "Student", UserEmail = "emma.sorensen@email.com" },
        new User { UserId = 3, UserName = "Mikkel Thomsen", Role = "Student", UserEmail = "mikkel.thomsen@email.com" },
        new User { UserId = 4, UserName = "Sofie Nielsen", Role = "Student", UserEmail = "sofie.nielsen@email.com" },
        new User { UserId = 5, UserName = "Jonas Pedersen", Role = "Student", UserEmail = "jonas.pedersen@email.com" },
        new User { UserId = 6, UserName = "Laura Jensen", Role = "Student", UserEmail = "laura.jensen@email.com" },
        new User { UserId = 7, UserName = "Oliver Madsen", Role = "Student", UserEmail = "oliver.madsen@email.com" },
        new User { UserId = 8, UserName = "Freja Kristensen", Role = "Student", UserEmail = "freja.kristensen@email.com" },
        new User { UserId = 9, UserName = "Lukas Mortensen", Role = "Student", UserEmail = "lukas.mortensen@email.com" },
        new User { UserId = 10, UserName = "Ida Lauritsen", Role = "Student", UserEmail = "ida.lauritsen@email.com" }
    };

    private string searchQuery = string.Empty;
    private string sortOrder = "asc";

    private IEnumerable<User> FilteredStudents
    {
        get
        {
            var filteredList = MyStudentsList
                .Where(s => string.IsNullOrEmpty(searchQuery) || s.UserName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase));

            return sortOrder == "asc"
                ? filteredList.OrderBy(s => s.UserName)
                : filteredList.OrderByDescending(s => s.UserName);
        }
    }
}