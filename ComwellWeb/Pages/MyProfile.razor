@page "/MyProfile"
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Forms
@using Core
@inject IUserService userService
@inject NavigationManager nav
@inject ILocalStorageService localStorage


@if (CurrentUser == null)
{
    <p>Indlæser profil...</p>
}
else
{
    <div id="baggrund">
        <h1 id="UserName">@CurrentUser.UserName</h1>
        <div id="altindhold">
            <img src="@profilePicture" class="profile-picture" alt="Profil billede"/>
            <InputFile OnChange="HandleSelected" accept="image/*"/>

            <div id="infobox">
                <div class="infobox-indhold">
                    <input class="Infobox-Input" type="text" @bind="CurrentUser.UserName">
                </div>
                <div class="infobox-indhold">
                    <input class="Infobox-Input" type="text" @bind="CurrentUser.UserEmail">
                </div>
                <div class="infobox-indhold">
                    <input class="Infobox-Input" type="text" @bind="CurrentUser.UserPhone">
                </div>
                @if (showSuccess)
                {
                    <p class="success-message">Ændringer gemt!</p>
                }

            </div>
            <div id="GemLogudBtn">
                <button class="btn btn-primary" @onclick="Logout">Logud</button>
                <button class="btn btn-primary" @onclick="SaveChanges">Gem ændringer</button>
           

            </div>
        </div>
    </div>
}
@code {
    private User? CurrentUser;
    private string profilePicture;
    private string defaultPicture = "/Pictures/NoProfilePicture.png";
string message;
private bool showSuccess = false;

    protected override async Task OnInitializedAsync()
    {
        CurrentUser = await userService.GetUserLoggedInAsync();

        if (CurrentUser == null)
        {
            // Redirect hvis ikke logget ind
            nav.NavigateTo("/login");
            return;
        }

        profilePicture = CurrentUser.Picture ?? defaultPicture;
    }

    private async Task HandleSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var buffer = new byte[file.Size];
        await file.OpenReadStream(maxAllowedSize: 1024 * 1024 * 10).ReadAsync(buffer);

        CurrentUser.Picture = $"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}";
        profilePicture = CurrentUser.Picture;
    }


    private async Task SaveChanges()
    {
            await userService.UpdateUser(CurrentUser);

                // Vis besked
                showSuccess = true;
                StateHasChanged();

                // Vent 3 sekunder og skjul besked
                await Task.Delay(3000);
                showSuccess = false;
                StateHasChanged();

                await userService.Logout();
                localStorage.SetItemAsync("user", CurrentUser);
    }
    
    private async Task Logout()
    {
        await userService.Logout(); // Fjern localStorage
        nav.NavigateTo("/login", true); // force reload til login
    }

}