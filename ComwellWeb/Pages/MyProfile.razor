@page "/MyProfile"
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Forms
@using Core
@inject IUserService userService
@inject NavigationManager nav
@inject ILocalStorageService localStorage


@if (CurrentUser == null)
{
    <p>Indlæser profil...</p>
}
else
{
    <div id="baggrund">
        <h1 id="UserName">@CurrentUser.UserName</h1>
        <div id="altindhold">
            <img src="@profilePicture" class="profile-picture" alt="Profil billede"/>
            <InputFile OnChange="HandleImageUpload" accept=".jpg,.jpeg,.png,.webp"/>
            @if (CurrentUser.Picture != null)
            {
                <button class="btn btn-danger" @onclick="RemoveProfilePicture">Fjern profilbillede</button>
            }
            <div id="infobox">
                <div class="infobox-indhold">
                    <input class="Infobox-Input" type="text" @bind="CurrentUser.UserName">
                </div>
                <div class="infobox-indhold">
                    <input class="Infobox-Input" type="text" @bind="CurrentUser.UserEmail">
                </div>
                <div class="infobox-indhold">
                    <input class="Infobox-Input" type="text" @bind="CurrentUser.UserPhone">
                </div>
                @if (showSuccess)
                {
                    <p class="success-message">Ændringer gemt!</p>
                }

            </div>
            <div id="GemLogudBtn">
                <button class="btn btn-primary" @onclick="Logout">Logud</button>
                <button class="btn btn-primary" @onclick="SaveChanges">Gem ændringer</button>
           

            </div>
        </div>
    </div>
}
@code {
    private User? CurrentUser;
    private string profilePicture;
    private string defaultPicture = "/Pictures/NoProfilePicture.png";
string message;
private bool showSuccess = false;

//holder raw bytes fra uoloaded villede
byte[] pictureBytes;

//kører når komponenten intialiseres (bruges til at hente brugere og sætte billede)
    protected override async Task OnInitializedAsync()
    {
        CurrentUser = await userService.GetUserLoggedInAsync();

        if (CurrentUser == null)
        {
            // Redirect hvis ikke logget ind
            nav.NavigateTo("/login");
            return;
        }

        //sætte billede til brugere, eller default billede hvis null
        profilePicture = CurrentUser.Picture != null ? $"data:image/gif;base64,{CurrentUser.Picture}" : defaultPicture;
    }

    //håndter billede-upload fra input
    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            //læs billedet som byte-array
            using var memoryStream = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(memoryStream);
            pictureBytes = memoryStream.ToArray();
            //gemmer billede som Base64 i currentuser og viser det
            CurrentUser.Picture = Convert.ToBase64String(pictureBytes);
            profilePicture = $"data:image/gif;base64,{CurrentUser.Picture}";
        }
    }
    //fjern pb og vis default
    private void RemoveProfilePicture()
    {
        CurrentUser.Picture = null;
        profilePicture = defaultPicture;
        StateHasChanged();
    }

        //gemmer ændringer og viser succes-besked
    private async Task SaveChanges()
    {
            await userService.UpdateUser(CurrentUser);

        //logger brugeren ud og opdaterer localstorage
                await userService.Logout();
                localStorage.SetItemAsync("user", CurrentUser);
                // Vis besked
                showSuccess = true;
                StateHasChanged();

                // Vent 3 sekunder og skjul besked
                await Task.Delay(3000);
                showSuccess = false;
                StateHasChanged();
    }
    
    private async Task Logout()
    {
        await userService.Logout(); // Fjern localStorage
        nav.NavigateTo("/login", true); // force reload til login
    }

}