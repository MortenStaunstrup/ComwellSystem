@using System.Text.Json

@using ComwellWeb.Services.Interfaces
@using Core

@inject NavigationManager NavigationManager

@inject IUserService UserService
@inject ICommentService CommentService
@inject INotificationService NotificationService

@page "/mygoals/{studentId:int}"

@* Rubrik over hvert delmål *@
<div class="mysubgoals-root">
    <div class="dashboard-container">
        <div class="left-section">
            <h2>@PageTitle</h2>

        
            <div class="progress-and-name">
                <h3>Dine fremskridt</h3>
                <div class="progress-container">            @*TODO skal fikses*@
                    <div class="progress-bar" style="width: @GetPctCompleted()%;"></div>
                </div>
            </div>

        
            <div class="filter-container">
                <label for="statusFilter">@* kan stå noget her, hvis der er brug for det *@</label>
                <select id="statusFilter" class="status-select" @onchange="OnFilterChanged">
                
                    @* Bruger filtre i @code *@
                    <option value="all">Alle</option>
                    <option value="completed">Fuldførte</option>
                    <option value="notcompleted">Ikke fuldførte</option>
                </select>
            </div>
        
        
            @* Filter til delmål. Vis hhv. alle, færdige og ikke-færdige delmål *@
            @if (!FilteredPlan.Any())
            {
                <p>Ingen mål endnu.</p>
            }
            else
            {
                @if (selectedFilter == "all")
                {
                    <p>@FilteredPlan.Count delmål</p>
                }
                else if (selectedFilter == "completed")
                {
                    <p>@FilteredPlan.Count delmål færdige</p>
                }
                else
                {
                    <p>@FilteredPlan.Count delmål mangler</p>
                }
            
                @* Containeren for hvert delmål *@

                <div class="assignments-container">
                    @foreach (var sg in FilteredPlan)
                    {
                        <div class="assignment-card">
                            <h4 class="assignment-title">@sg.SubGoalName</h4>
                            <p class="assignment-description">@sg.SubGoalDescription</p>
                            <button class="toggle-button" @onclick="() => ToggleExpand(sg.SubGoalId)">
                                @(Expanded.Contains(sg.SubGoalId) ? "Vis mindre" : "Vis mere")
                            </button>
                        
                            @if (Expanded.Contains(sg.SubGoalId))
                            {
                                @* hvis status = true: "fuldført" og omvendt *@
                                <div class="subgoal-details">
                                    <p>Type: @sg.SubGoalType</p>
                                    <p>Status: @(sg.SubGoalStatus ? "Fuldført" : "Ikke fuldført")</p> @* ligesom if else: status afhænger af om subgoalstatus er fuldført eller ikke fuldført *@

                                    @* Mål *@
                                    <div class="middle-goal-separator"></div> @* adskiller midddle- og minigoals i css *@
                                    @foreach (var md in sg.MiddleGoals)
                                    {
                                        bool hasMiniGoals = md.MiniGoals != null && md.MiniGoals.Any();
                                        bool allMiniGoalsDone = hasMiniGoals && md.MiniGoals.All(mg => mg.Status);

                                        <div class="middle-goal-wrapper">
                                            <div class="middle-goal-header"
                                                 style="cursor: @(hasMiniGoals ? "pointer" : "default")"
                                                 @onclick="@(hasMiniGoals ? () => ToggleMiddleGoalExpand(sg.SubGoalId, md.Name) : null)"> @* hvis middlegoal har minigoals skal man kunne ekspandere *@
                                            
                                                @if (hasMiniGoals)
                                                {
                                                    <input type="checkbox" checked="@allMiniGoalsDone" disabled style="margin-right: 5px;" />
                                                }
                                                else
                                                {
                                                    <span style="display:inline-block; width: 18px; margin-right: 5px;"></span> @* ekstra plads/mellemrum *@
                                                }
                                            
                                                @if (hasMiniGoals)
                                                {
                                                    <span class="expand-icon">@((IsExpanded(sg.SubGoalId, md.Name)) ? "▼" : "▶")</span> @* hvis middlegoal har minigoals vis pil, ellers gem dem. *@
                                                }
                                                else
                                                {
                                                    <span class="expand-icon" style="visibility:hidden;">▶</span>
                                                }

                                                <label class="middle-goal-label">
                                                    @* lav checkbox til middlegoal hvis den ikke har minigoals *@
                                                    @if (!hasMiniGoals)
                                                    {
                                                        <input type="checkbox"
                                                               checked="@md.Status"
                                                               disabled/>
                                                    }
                                                    @md.Name
                                                </label>
                                            
                                                @* afslut delmål knap til delmål. Kalder toggle i @code. *@
                                                <input type="checkbox"
                                                       @onchange="_ => ToggleSelectedMiddleGoal(sg.SubGoalId, md)"
                                                       checked="@(SelectedMiddleGoals.TryGetValue(sg.SubGoalId, out var selectedMiddleList) && selectedMiddleList.Contains(md))"
                                                       disabled="@(!IsStudent)" />
                                            </div>
        
                                            @if (hasMiniGoals && IsExpanded(sg.SubGoalId, md.Name)) @* hvis middlegoal har minigoals: vis alle minigoals som tilhøre middlegoal. *@
                                            {
                                                <ul class="mini-goal-list">
                                                    @foreach (var mm in md.MiniGoals) @* tilføjer checkbox med status kodet i for hvert minigoal *@
                                                    {
                                                        <li>
                                                            <label>
                                                                <input type="checkbox" checked="@mm.Status" disabled />
                                                                @mm.Name
                                                            </label>
                                                            <input type="checkbox"
                                                                   @onchange="_ => ToggleSelectedMiniGoal(sg.SubGoalId, mm)"
                                                                   checked="@(SelectedMiniGoals.TryGetValue(sg.SubGoalId, out var selectedMiniList) && selectedMiniList.Contains(mm))"
                                                                   disabled="@(!IsStudent)" />
                                                        </li>
                                                    }
                                                </ul>
                                            }
                                        </div>
                                    }

                                    @* kun vis knappen hvis det valgte middlegoal ikke har minigoals *@
                                    @if (IsStudent && SelectedMiddleGoals.TryGetValue(sg.SubGoalId, out var selectedMiddleGoals) && selectedMiddleGoals.Any(md => md.MiniGoals == null || !md.MiniGoals.Any()))
                                    {
                                        @* kalder completemiddelgoal for alle valte minigoals *@
                                        <button class="action-button"
                                                @onclick="() => CompleteMiddleGoal(sg, selectedMiddleGoals)"
                                                disabled="@_sending">
                                            Afslut valgte delmål
                                        </button>
                                    }
                                
                                    @* ligesom før: vi en knap for aflutning af mål hvis tjekket af. (Isstudent er ligegyldig på den her nu, hvor lærere alligevel ikke kan tjekke af) *@
                                    @if (IsStudent && SelectedMiniGoals.TryGetValue(sg.SubGoalId, out var selectedMiniGoals) && selectedMiniGoals.Any())
                                    {
                                        <button class="action-button"
                                                @onclick="() => CompleteMiniGoal(sg, selectedMiniGoals)"
                                                disabled="@_sending">
                                            Afslut valgte minimål
                                        </button>
                                    }
                                    @*Kommentarer. Sensitiv over for role*@
                                    <div class="comment-section-student">
                                        <h6>Kommentarer</h6>
                                        
                                        @* kalder toggelcommenthistory hvis man trykker på knappen *@
                                        <button class="toggle-button" @onclick="() => ToggleCommentHistory(sg.SubGoalId)">
                                            @(ExpandedComments.Contains(sg.SubGoalId) ? "Skjul kommentarer" : "Vis kommentarer")
                                        </button>

                                        @if (ExpandedComments.Contains(sg.SubGoalId))
                                        {
                                            @foreach (var comment in CommentMap.GetValueOrDefault(sg.SubGoalId, new List<Comment>()))
                                            {
                                                <div class="comment">
                                                    <span class="date">@comment.CommentDate.ToString("dd-MM-yyyy HH:mm")</span>
                                                    <strong>@comment.CommentSenderName</strong>
                                                    <p>@comment.CommentContent</p>
                                                </div>
                                            }
                                        }

                                        @if (CurrentUser.Role == "Student" && IsStudent)
                                        {
                                            <input placeholder="Skriv kommentar" value="@NewComment[sg.SubGoalId]"
                                                   @oninput="e => NewComment[sg.SubGoalId] = e.Value?.ToString()"/>
                                            <button @onclick="() => SendComment(sg.SubGoalId)">
                                                Send
                                            </button>
                                        }

                                        @if (IsKitchenManager && CurrentUser.UserId == UserModel.UserIdResponsible)
                                    {
                                            <input class="comment-input"
                                                   placeholder="Lærer-kommentar"
                                                   value="@KitchenmanagerNewComment[sg.SubGoalId]"
                                                   @oninput="(e) => KitchenmanagerNewComment[sg.SubGoalId] = e.Value?.ToString()"/>

                                            <button class="action-button"
                                                    @onclick="() => SendKitchenManagerComment(sg.SubGoalId)">
                                                Tilføj lærer-kommentar
                                            </button>
                                        }

                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

@* Skal skrive en besked på siden afhængigt af, hvilken rolle man har. Tænke noget "ingen adgang" eller noget. Den gør ikke noget lige nu. *@
@if (CurrentUser != null && UserModel != null) //usermodel er den elev's page man er inde på
{
    if (CurrentUser.Role == "KitchenManager")
    {
        <h2>@UserModel.UserName</h2>
    }
    else if (CurrentUser.UserId == UserModel.UserId)
    {
        
    }
    else
    {
        
    }
}
else
{
    <h2>Indlæser...</h2>
}

@code {
    
    @* Parametre *@
    @* vi bruger studentId fra parent-komponent, som bare bliver parent udfa hvilken variabel vi bruger. *@
    [Parameter] public int? studentId { get; set; }
    
    private User? user;
    private User? CurrentUser;
    private User UserModel;
    private bool IsKitchenManager => CurrentUser?.Role == "KitchenManager";
    private bool IsStudent => CurrentUser?.UserId == UserModel?.UserId;
    private int ViewerUserId;
    private string PageTitle;
    private bool _sending = false;
    private string selectedFilter = "all";
    
    @* hash-sets *@
    @* laver to obejkter som er i samlinger. Sikrer, at der ikke er dubletter. *@
    private HashSet<string> expandedMiddleGoals = new HashSet<string>();
    private HashSet<int> Expanded = new();
    
    @* Lister *@
    private List<SubGoal> FullPlan = new();
    private List<SubGoal> FilteredPlan = new();
    
    @* Dictionaries *@
    private Dictionary<int, List<MiniGoal>> SelectedMiniGoals = new();
    private Dictionary<int, List<MiddleGoal>> SelectedMiddleGoals = new();
    private Dictionary<int, List<Comment>> CommentMap = new();
    private Dictionary<int, string> NewComment = new();
    private Dictionary<int, string> Errors = new();
    private Dictionary<int, string> KitchenmanagerNewComment = new();
    
    @* Køre når siden er klar til at starte *@
    protected override async Task OnInitializedAsync()
    {
        CurrentUser = await UserService.GetUserLoggedInAsync();
    
        @* @* viewId bliver studentId, medmindre den er null – så bruges CurrentUser.UserId (lederen) *@
        var viewId = studentId ?? CurrentUser.UserId;
        
        UserModel = await UserService.GetUserByUserId(viewId);
      //  HasAccess = CurrentUser.Role == "KitchenManager" || viewId == CurrentUser.UserId;
        PageTitle = CurrentUser.Role == "KitchenManager" ? UserModel.UserName : "Elevplan";

        FullPlan = UserModel.StudentPlan;
        ApplyFilter();

        foreach (var sg in FullPlan)
        {   @* var regner selv typen ud. Fx. ved den, at comments er en list. *@
            var comments = await CommentService.GetCommentsBySubGoalId(sg.SubGoalId, viewId);
            CommentMap[sg.SubGoalId] = comments?.ToList() ?? new List<Comment>();

            @* Opdater kommentarernes navn*@
            foreach (var comment in CommentMap[sg.SubGoalId])
            {
                if (string.IsNullOrEmpty(comment.CommentSenderName))
                {
                    var user = await UserService.GetUserByUserId(comment.CommentSenderId);
                    comment.CommentSenderName = user?.UserName ?? "Ukendt bruger";
                }
            }

            NewComment[sg.SubGoalId] = "";
            KitchenmanagerNewComment[sg.SubGoalId] = "";
            Errors[sg.SubGoalId] = "";
        }
    }


    private void ApplyFilter()
    {
        FilteredPlan = selectedFilter switch
        {
            "completed" => FullPlan.Where(s => s.SubGoalStatus).ToList(),
            "notcompleted" => FullPlan.Where(s => !s.SubGoalStatus).ToList(),
            _ => FullPlan.ToList()
        };
    }


    private void OnFilterChanged(ChangeEventArgs e)
    {
        selectedFilter = e.Value?.ToString()?.ToLower() ?? "all";
        ApplyFilter();
    }

    private void ToggleExpand(int id)
    {
        if (!Expanded.Add(id)) Expanded.Remove(id);
    }

    private async Task SendComment(int SubGoalId)
    {
        if (string.IsNullOrWhiteSpace(NewComment[SubGoalId]))
        {
            Errors[SubGoalId] = "Kommentaren må ikke være tom.";
            return;
        }

        var newC = new Comment
        {
            CommentDate = DateTime.Now,
            CommentSubGoalId = SubGoalId,
            CommentContent = NewComment[SubGoalId],
            CommentSenderId = CurrentUser.UserId,
            CommentSenderName = CurrentUser.UserName,
            StudentId = studentId ?? CurrentUser.UserId
        };

        try
        {
            CommentService.AddComment(newC);
            CommentMap[SubGoalId].Add(newC);
            KitchenmanagerNewComment[SubGoalId] = "";
            Errors[SubGoalId] = "";
            NewComment[SubGoalId] = "";
        }
        catch (Exception ex)
        {
            Errors[SubGoalId] = ex.Message;
        }
    }

    private void ToggleSelectedMiniGoal(int SubGoalId, MiniGoal mm)
    {
        if (!SelectedMiniGoals.ContainsKey(SubGoalId))
            SelectedMiniGoals[SubGoalId] = new List<MiniGoal>();

        var selected = SelectedMiniGoals[SubGoalId];
        if (selected.Contains(mm))
            selected.Remove(mm);
        else
            selected.Add(mm);
    }
    
    private void ToggleSelectedMiddleGoal(int SubGoalId, MiddleGoal md)
    {
        if (!SelectedMiddleGoals.ContainsKey(SubGoalId))
            SelectedMiddleGoals[SubGoalId] = new List<MiddleGoal>();

        var selected = SelectedMiddleGoals[SubGoalId];
        if (selected.Contains(md))
            selected.Remove(md);
        else
            selected.Add(md);
    }

    private async Task CompleteMiniGoal(SubGoal sg, List<MiniGoal> selectedMiniGoals)
    {
        if (_sending) return;
        _sending = true;

        try
        {
            var responsibleId = UserModel.UserIdResponsible;
            if (responsibleId == null)
            {
                Errors[sg.SubGoalId] = "Ingen ansvarlig bruger fundet.";
                return;
            }

            var newId = await NotificationService.GetMaxNotificationIdAsync();

            foreach (var mm in selectedMiniGoals)
            {
                // Check om notifikation allerede findes
                bool exists = await NotificationService.NotificationExistsForMiniGoalAsync(responsibleId.Value, CurrentUser.UserId, mm.Name);
                
                if (exists)
                {
                    Errors[sg.SubGoalId] = $"Notifikation for minimålet '{mm.Name}' er allerede sendt.";
                    continue;
                }
                
                var noti = new Notification
                {
                    NotificationId = ++newId,
                    UserId = responsibleId, //userId betyder lederen her
                    SenderId = CurrentUser.UserId,
                    MiniGoalName = mm.Name,
                    NotificationContent = $"{CurrentUser.UserName} har færdiggjort et minimål: '{mm.Name}'",
                    TimeStamp = DateTime.Now
                };
                await NotificationService.SendMiniGoalNotificationAsync(noti);
                mm.Status = true;
                
                var aboveMiddleGoal = sg.MiddleGoals.FirstOrDefault(m =>
                    m.MiniGoals.Any(x => x.Name == mm.Name));

                if (aboveMiddleGoal != null && aboveMiddleGoal.MiniGoals.All(mg => mg.Status))
                {
                    aboveMiddleGoal.Status = true;
                }
                
                bool allDone = sg.MiddleGoals.All(m => m.Status) &&
                               sg.MiddleGoals.SelectMany(m => m.MiniGoals).All(mg => mg.Status);
                if (allDone)
                {
                    sg.SubGoalStatus = true;
                    await UserService.UpdateUser(UserModel);
                }

            }
        }
        catch (Exception ex)
        {
            Errors[sg.SubGoalId] = $"Fejl ved afslutning af delmål: {ex.Message}";
        }
        finally
        {
            _sending = false;
            StateHasChanged();
        }
    }



    
    private async Task CompleteMiddleGoal(SubGoal sg, List<MiddleGoal> selectedMiddleGoals)
    {
        if (_sending) return;
        _sending = true;
    
        try
        {
            var responsibleId = UserModel.UserIdResponsible;
            if (responsibleId == null)
            {
                Errors[sg.SubGoalId] = "Ingen ansvarlig bruger fundet.";
                return;
            }

            var newId = await NotificationService.GetMaxNotificationIdAsync();

            foreach (var md in selectedMiddleGoals)
            {
                // Check om notifikation allerede findes
                bool exists = await NotificationService.NotificationExistsForMiddleGoalAsync(responsibleId.Value, CurrentUser.UserId, md.Name);


                if (exists)
                {
                    Errors[sg.SubGoalId] = $"Notifikation for delmålet '{md.Name}' er allerede sendt.";
                    continue;
                }

                var noti = new Notification
                {
                    NotificationId = ++newId,
                    UserId = responsibleId,
                    SenderId = CurrentUser.UserId,
                    MiddleGoalName = md.Name,
                    NotificationContent = $"{CurrentUser.UserName} har færdiggjort et delmål: '{md.Name}'",
                    TimeStamp = DateTime.Now
                };

                await NotificationService.SendMiddleGoalNotificationAsync(noti);
                md.Status = true;
            }
        
            bool allDone = sg.MiddleGoals.All(m => m.Status) &&
                           sg.MiddleGoals.SelectMany(m => m.MiniGoals).All(mg => mg.Status);
            if (allDone)
            {
                sg.SubGoalStatus = true;
                await UserService.UpdateUser(UserModel);

            }
            SelectedMiddleGoals[sg.SubGoalId].Clear();
        }
        catch (Exception ex)
        {
            Errors[sg.SubGoalId] = $"Fejl ved afslutning af delmål: {ex.Message}";
        }
        finally
        {
            _sending = false;
            StateHasChanged();
        }
    }

    private string GetPctCompleted()
    {
        if (FullPlan == null || !FullPlan.Any()) return "0";
        var pct = 100.0 * FullPlan.Count(s => s.SubGoalStatus) / FullPlan.Count;
        return Math.Truncate(pct).ToString("F0");
    }

    private async Task SendKitchenManagerComment(int subGoalId)
    {
        if (string.IsNullOrWhiteSpace(KitchenmanagerNewComment[subGoalId]))
        {
            Errors[subGoalId] = "Kommentaren må ikke være tom!";
            return;
        }

        var newComment = new Comment
        {
            CommentDate = DateTime.Now,
            CommentSubGoalId = subGoalId,
            CommentContent = KitchenmanagerNewComment[subGoalId],
            CommentSenderName = CurrentUser.UserName,
            CommentSenderId = CurrentUser.UserId,
            StudentId = studentId ?? CurrentUser.UserId
        };

        try
        {
            CommentService.AddComment(newComment);
            CommentMap[subGoalId].Add(newComment);
            KitchenmanagerNewComment[subGoalId] = "";
            Errors[subGoalId] = "";
        }
        catch (Exception ex)
        {
            Errors[subGoalId] = $"Fejl ved kommentar: {ex.Message}";
        }
    }
    private HashSet<int> ExpandedComments = new();

    private void ToggleCommentHistory(int subGoalId)
    {
        if (!ExpandedComments.Add(subGoalId))
            ExpandedComments.Remove(subGoalId);
    }
    
   
    private void ToggleMiddleGoalExpand(int subGoalId, string middleGoalName)
    {
        var key = $"{subGoalId}_{middleGoalName}";
        if (!expandedMiddleGoals.Add(key))
        {
            expandedMiddleGoals.Remove(key);
        }
    }

    private bool IsExpanded(int subGoalId, string middleGoalName) => expandedMiddleGoals.Contains($"{subGoalId}_{middleGoalName}");
}
