@page "/studentlist"
@using ComwellWeb.Services.Interfaces
@using Core
@using ComwellWeb.Komponents.Modal
@inject ISubGoalService SubGoalService
@inject HttpClient Http
@inject IUserService _userservice
@inject NavigationManager nav
@inject IUserService _userService

@if (!loaded)
{
    <p>Indlæser...</p>
}
else
{
    <div class="studentlist-wrapper">

        <div class="filter-container">
            <select id="hotelFilter">
                <option value="">Alle hoteller</option>
                @foreach (var hotel in hotelList)
                {
                    <option value="@hotel">@hotel</option>
                }
            </select>
            
            <div id="datoknapper">
                <div class="datoknap">
                    <label for="startDateFilter">Startdato</label>
                    <input type="date" id="startDateFilter" @bind="startDate" @bind:event="onchange" />
                </div>
                <div class="datoknap">
                    <label for="endDateFilter">Slutdato</label>
                    <input type="date" id="endDateFilter" @bind="endDate" @bind:event="onchange" />
                </div>
            </div>

            <select id="educationFilter">
                <option value="">Alle uddannelser</option>
                @foreach (var edu in educationList)
                {
                    <option value="@edu">@edu</option>
                }
            </select>

            <select id="tripFilter">
                <option value="">Alle ture</option>
                @foreach (var Trip in TripList)
                {
                    <option value="@Trip">@Trip</option>
                }
            </select>

            @if (CurrentUser?.Role == "KitchenManager")
            {
                <div id="EgneEleverContainer">
                    @if (OwnStudentsBool == false)
                    {
                        <p class="EgneStuderendeFilter">Alle elever</p>
                    }
                    else
                    {
                        <p class="EgneStuderendeFilter">Egne elever</p>
                    }
                    <label class="switch">
                        <input type="checkbox" @bind="OwnStudentsBool">
                        <span class="slider"></span>
                    </label>
                </div>
            }
        </div>
        
        <div class="student-list-container">
            @if (_allStudents == null)
            {
                <p>Indlæser...</p>
            }
            else
            {
                var displayedStudents = OwnStudentsBool 
                    ? _sortedStudents.Where(s => s.UserIdResponsible == CurrentUser.UserId).ToList() // ændret
                    : _sortedStudents;

                if (displayedStudents.Any()) // ændret
                {
                    foreach (var student in displayedStudents) // ændret
                    {
                        <div class="student-row" @onclick="() => ShowStudentPlan(student.UserId)">
                            <span class="student-name">@student.UserName</span>
                            <span>@(student.StartDate?.ToString("dd-MM-yyyy") ?? "N/A")</span>
                            <span>@_pctCompleted[student.UserId]%</span>
                            <div class="progress-container">
                                <div class="progress-bar" style="width: @_pctCompleted[student.UserId]%;"></div>
                            </div>
                        </div>
                        @if (_currentShownStudent == student.UserId)
                        {
                            <div class="mt-3">
                                <a class="btn btn-sm btn-primary" href="@($"/mygoals/{student.UserId}")">Gå til mål</a>
                            </div>
                        }
                    }
                }
                else
                {
                    <p>Du har ingen elever.</p> <!-- tilføjet -->
                }
            }
        </div> 
    </div>
}
@code {
    User? CurrentUser;
    List<User>? _allStudents;
    List<User>? _sortedStudents;
    Dictionary<int, double> _pctCompleted = new();
    int _currentShownStudent;
    bool ShowModal = false;
    private bool _OwnStudentsBool;
    private bool loaded = false;

    List<string> hotelList = new() { "Comwell Aarhus", "Comwell Kolding", "Comwell H.C. Andersen Odense" };
    List<string> educationList = new() { "Kok", "Tjener", "Receptionist", "Cater" };
    List<string> TripList = new() { "Italiten", "ÅrhusGåGade", "Juleturen" };

    private DateOnly? _startDate;
    private DateOnly? _endDate;

    public DateOnly? startDate
    {
        get => _startDate;
        set
        {
            if (_startDate != value)
            {
                _startDate = value;
                FilterStudentsByDate();
            }
        }
    }

    public DateOnly? endDate
    {
        get => _endDate;
        set
        {
            if (_endDate != value)
            {
                _endDate = value;
                FilterStudentsByDate();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        CurrentUser = await _userservice.GetUserLoggedInAsync();
        if (CurrentUser?.Role == "Student" || CurrentUser == null)
        {
            nav.NavigateTo("/login");
            return;
        }

        _allStudents = await _userservice.GetAllStudentsAsync();
        _sortedStudents = _allStudents;

        foreach (var student in _allStudents)
        {
            double pct = await SubGoalService.GetPctCompletedSubGoalsByStudentIdAsync(student.UserId);
            _pctCompleted[student.UserId] = Math.Truncate(pct);
        }

        loaded = true;
    }

    private void ShowStudentPlan(int studentId)
    {
        _currentShownStudent = studentId;
        ShowModal = true;
        StateHasChanged();
    }

    private void CloseModal()
    {
        ShowModal = false;
    }

    private bool OwnStudentsBool
    {
        get => _OwnStudentsBool;
        set
        {
            _OwnStudentsBool = value;
            Console.WriteLine($"OwnStudentsBool er nu: {_OwnStudentsBool}");
           
        }
    }

    private void FilterStudentsByDate()
    {
        if (_allStudents == null)
            return;

        _sortedStudents = _allStudents.Where(student =>
        {
            if (!student.StartDate.HasValue)
                return false;
            
            bool matchStart = !startDate.HasValue || student.StartDate.Value == startDate.Value;

           
            bool matchEnd = !endDate.HasValue || student.StartDate.Value == endDate.Value;

            return matchStart && matchEnd;
        }).ToList();

        StateHasChanged();
    }
}
